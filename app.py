"""
Script Streamlit pour comparer les positions d'une demande (Anfrage) issues d'une base de donn√©es
avec les positions d'une offre fournisseur (Angebot) issues d'un fichier CSV.

L'application permet √† l'utilisateur de se connecter √† une base de donn√©es SQL Server,
de sp√©cifier un ID de demande (AnfrageID), et de charger un fichier CSV contenant
les donn√©es de l'offre. Elle affiche ensuite les donn√©es de la demande et de l'offre,
puis un tableau comparatif mettant en √©vidence les correspondances, les diff√©rences,
les manquants et les extras.
"""
import streamlit as st
import pandas as pd
import pyodbc
import numpy as np

@st.cache_data # Streamlit decorator to cache the output of this function
def connect_db(server: str, database: str, uid: str, pwd: str, anfrage_id: int) -> pd.DataFrame:
    """
    Se connecte √† la base de donn√©es SQL Server et r√©cup√®re les donn√©es de la table Anfrage_Positionen.
    Utilise st.cache_data pour la mise en cache des r√©sultats.
    Filtre par AnfrageID si celui-ci est fourni et sup√©rieur √† 0.

    Args:
        server (str): Nom ou adresse IP du serveur SQL.
        database (str): Nom de la base de donn√©es.
        uid (str): Nom d'utilisateur pour la connexion DB.
        pwd (str): Mot de passe pour la connexion DB.
        anfrage_id (int): ID de la demande √† filtrer.

    Returns:
        pd.DataFrame: DataFrame contenant les donn√©es de la demande (AnfrageID, ArticleNumber, Quantity),
                      ou un DataFrame vide en cas d'erreur.
    """
    conn_str = f"DRIVER={{SQL Server}};SERVER={server};DATABASE={database};UID={uid};PWD={pwd}"
    try:
        conn = pyodbc.connect(conn_str)
        cursor = conn.cursor()
        
        query = "SELECT AnfrageID, ArticleNumber, Quantity FROM Anfrage_Positionen"
        params = []
        
        if anfrage_id > 0:
            query += " WHERE AnfrageID = ?"
            params.append(anfrage_id)
            
        df = pd.read_sql(query, conn, params=params if params else None)
        conn.close()
        return df
    except pyodbc.Error as ex:
        sqlstate = ex.args[0]
        st.error(f"Erreur de connexion √† la base de donn√©es: {sqlstate}")
        if 'Login failed' in str(ex):
            st.error("V√©rifiez vos identifiants de connexion (UID, PWD).")
        elif 'Server not found' in str(ex) or 'TCP/IP error' in str(ex):
            st.error("V√©rifiez le nom du serveur et la connectivit√© r√©seau.")
        elif 'Database not found' in str(ex):
             st.error(f"La base de donn√©es '{database}' n'a pas √©t√© trouv√©e sur le serveur '{server}'.")
        else:
            st.error(f"D√©tails de l'erreur: {ex}")
        return pd.DataFrame() # Retourne un DataFrame vide en cas d'erreur de connexion
    except Exception as e:
        st.error(f"Une erreur inattendue est survenue lors de la connexion √† la base de donn√©es: {e}")
        return pd.DataFrame() # Retourne un DataFrame vide pour toute autre exception

@st.cache_data # Streamlit decorator to cache the output of this function
def process_csv(uploaded_file) -> pd.DataFrame:
    """
    Traite le fichier CSV t√©l√©vers√© contenant les donn√©es de l'offre (Angebot).
    Regroupe par 'ArticleNumber' et somme les 'Quantity'.
    S'assure que la colonne 'Quantity' est num√©rique.

    Args:
        uploaded_file: Objet fichier t√©l√©vers√© par Streamlit (st.file_uploader).

    Returns:
        pd.DataFrame: DataFrame contenant les donn√©es de l'offre (ArticleNumber, Quantity),
                      ou un DataFrame vide si le fichier est invalide ou en cas d'erreur.
    """
    if uploaded_file is None:
        st.info("Veuillez charger un fichier CSV pour l'offre.")
        return pd.DataFrame()
    try:
        df = pd.read_csv(uploaded_file)
        # V√©rification de la pr√©sence des colonnes n√©cessaires
        if 'ArticleNumber' not in df.columns or 'Quantity' not in df.columns:
            st.error("Le fichier CSV doit contenir les colonnes 'ArticleNumber' et 'Quantity'.")
            return pd.DataFrame()
        
        # Conversion de la colonne 'Quantity' en num√©rique, les erreurs deviennent NaN
        df['Quantity'] = pd.to_numeric(df['Quantity'], errors='coerce')
        # Suppression des lignes o√π 'Quantity' n'a pas pu √™tre converti (NaN)
        df.dropna(subset=['Quantity'], inplace=True)
        
        # Regroupement par ArticleNumber et somme des Quantity
        df_grouped = df.groupby('ArticleNumber', as_index=False)['Quantity'].sum()
        return df_grouped
    except pd.errors.EmptyDataError: # Erreur si le CSV est vide
        st.error("Le fichier CSV est vide.")
        return pd.DataFrame()
    except Exception as e: # Gestion des autres erreurs de lecture ou traitement CSV
        st.error(f"Erreur lors du traitement du fichier CSV: {e}")
        return pd.DataFrame()

def compare_data(df_anfrage: pd.DataFrame, df_angebot: pd.DataFrame) -> pd.DataFrame:
    """
    Compare les donn√©es de la demande (Anfrage) et de l'offre (Angebot).
    Fusionne les deux DataFrames sur 'ArticleNumber' et cr√©e une colonne 'R√©sultat'
    indiquant le statut de chaque article (OK, Quantit√© diff√©rente, Manquant, En plus).

    Args:
        df_anfrage (pd.DataFrame): DataFrame des positions de la demande, doit contenir 'ArticleNumber' et 'Quantity'.
        df_angebot (pd.DataFrame): DataFrame des positions de l'offre, doit contenir 'ArticleNumber' et 'Quantity'.

    Returns:
        pd.DataFrame: DataFrame fusionn√© avec les colonnes 'ArticleNumber', 'Quantity_Anfrage',
                      'Quantity_Angebot', et 'R√©sultat'. Retourne un DataFrame vide si les deux entr√©es sont vides.
    """
    if df_anfrage.empty and df_angebot.empty:
        st.warning("Aucune donn√©e de demande ou d'offre √† comparer.")
        return pd.DataFrame()

    # Ensure columns are named consistently for merging if they come directly from grouping
    df_anfrage = df_anfrage.rename(columns={'Quantity': 'Quantity_Anfrage'})
    df_angebot = df_angebot.rename(columns={'Quantity': 'Quantity_Angebot'})

        return pd.DataFrame() # Retourne un DataFrame vide si la fusion ne donne rien ou si une entr√©e est vide mais pas l'autre.

    # Renommage des colonnes 'Quantity' pour clart√© apr√®s la fusion
    df_anfrage = df_anfrage.rename(columns={'Quantity': 'Quantity_Anfrage'})
    df_angebot = df_angebot.rename(columns={'Quantity': 'Quantity_Angebot'})

    # Fusion externe pour conserver tous les ArticleNumber des deux DataFrames
    df_merged = pd.merge(df_anfrage, df_angebot, on='ArticleNumber', how='outer')

    # Remplissage des NaN par 0 pour les quantit√©s. Essentiel pour les articles pr√©sents dans un seul des DataFrames.
    df_merged['Quantity_Anfrage'] = df_merged['Quantity_Anfrage'].fillna(0)
    df_merged['Quantity_Angebot'] = df_merged['Quantity_Angebot'].fillna(0)

    # D√©finition des conditions pour la colonne 'R√©sultat'
    conditions = [
        (df_merged['Quantity_Anfrage'] > 0) & (df_merged['Quantity_Angebot'] > 0) & (df_merged['Quantity_Anfrage'] == df_merged['Quantity_Angebot']), # Article pr√©sent dans les deux, quantit√© identique
        (df_merged['Quantity_Anfrage'] > 0) & (df_merged['Quantity_Angebot'] > 0) & (df_merged['Quantity_Anfrage'] != df_merged['Quantity_Angebot']), # Article pr√©sent dans les deux, quantit√© diff√©rente
        (df_merged['Quantity_Anfrage'] > 0) & (df_merged['Quantity_Angebot'] == 0), # Article pr√©sent dans la demande, manquant dans l'offre
        (df_merged['Quantity_Anfrage'] == 0) & (df_merged['Quantity_Angebot'] > 0)  # Article absent de la demande, en plus dans l'offre
    ]
    
    # D√©finition des r√©sultats correspondants aux conditions
    results = [
        '‚úÖ OK',                          # Statut pour quantit√© identique
        '‚ö†Ô∏è Quantit√© diff√©rente',         # Statut pour quantit√© diff√©rente
        '‚ùå Manquant',                    # Statut pour article manquant dans l'offre
        'üÜï En plus (Alternative ?)'     # Statut pour article en plus dans l'offre
    ]
    
    # Cr√©ation de la colonne 'R√©sultat' bas√©e sur les conditions
    df_merged['R√©sultat'] = np.select(conditions, results, default='Erreur') # 'Erreur' si aucune condition n'est remplie (ne devrait pas arriver)
    
    # R√©organisation des colonnes pour une meilleure lisibilit√©
    cols_order = ['ArticleNumber', 'Quantity_Anfrage', 'Quantity_Angebot', 'R√©sultat']
    df_merged = df_merged[cols_order]

    return df_merged

def main():
    """
    Fonction principale pour l'application Streamlit Comparateur d'Offres.
    Configure la page, g√®re les entr√©es utilisateur dans la barre lat√©rale,
    affiche les donn√©es de la demande et de l'offre, et permet la comparaison
    des deux ensembles de donn√©es.
    """
    # Configuration de la page Streamlit (doit √™tre la premi√®re commande Streamlit)
    st.set_page_config(layout="wide", page_title="Comparateur Offres/Demandes")

    st.title("Comparateur d'Offres Fournisseurs et Demandes Client")

    # --- Barre Lat√©rale (Sidebar) pour les entr√©es utilisateur ---
    st.sidebar.header("Param√®tres de Connexion DB")
    # Champs pour la connexion √† la base de donn√©es
    db_server = st.sidebar.text_input("Serveur", value="YOUR_SERVER", help="Nom ou adresse IP du serveur SQL.")
    db_database = st.sidebar.text_input("Database", value="YOUR_DATABASE", help="Nom de la base de donn√©es.")
    db_uid = st.sidebar.text_input("Utilisateur", value="YOUR_UID", help="Identifiant de connexion √† la DB.")
    db_pwd = st.sidebar.text_input("Mot de Passe", value="YOUR_PWD", type="password", help="Mot de passe de connexion √† la DB.")

    st.sidebar.header("Filtre Demande (Anfrage)")
    # Champ pour l'ID de la demande
    anfrage_id_filter = st.sidebar.number_input("AnfrageID", min_value=0, step=1, value=0, help="Entrez 0 pour ne pas filtrer ou l'ID sp√©cifique.")

    st.sidebar.header("Offre Fournisseur (CSV)")
    # Champ pour le t√©l√©versement du fichier CSV de l'offre
    uploaded_file = st.sidebar.file_uploader("Charger un fichier CSV", type=["csv"], help="Le CSV doit contenir 'ArticleNumber' et 'Quantity'.")

    # --- Initialisation des DataFrames ---
    # DataFrames pour stocker et afficher les donn√©es de la demande, de l'offre et du comparatif.
    # Initialis√©s vides pour √©viter les erreurs si les donn√©es ne sont pas charg√©es.
    df_anfrage_display = pd.DataFrame()
    df_angebot_display = pd.DataFrame()
    df_comparison_display = pd.DataFrame() # DataFrame pour le tableau comparatif

    # --- Chargement des Donn√©es de la Demande (Anfrage) ---
    # Condition pour tenter de charger les donn√©es de la demande :
    # Un ID de demande doit √™tre sp√©cifi√© et les param√®tres DB ne doivent pas √™tre les valeurs par d√©faut.
    if anfrage_id_filter > 0: # Uniquement si un ID de demande est sp√©cifi√©
        if db_server and db_server != "YOUR_SERVER" and \
           db_database and db_database != "YOUR_DATABASE" and \
           db_uid and db_uid != "YOUR_UID" and \
           db_pwd: # On v√©rifie aussi que le mot de passe n'est pas vide (m√™me si YOUR_PWD est une chaine valide)
            # Appel de la fonction de connexion √† la DB et r√©cup√©ration des donn√©es
            df_anfrage_raw = connect_db(db_server, db_database, db_uid, db_pwd, anfrage_id_filter)
            if not df_anfrage_raw.empty:
                # Regroupement par ArticleNumber et somme des Quantity pour la demande
                df_anfrage_display = df_anfrage_raw.groupby('ArticleNumber', as_index=False)['Quantity'].sum()
        # else: Si les param√®tres DB sont ceux par d√©faut ou manquants, on n'essaie pas de se connecter.
            # Le message d'information dans la section d'affichage de la demande guidera l'utilisateur.

    # --- Chargement des Donn√©es de l'Offre (Angebot) ---
    # Condition pour traiter le fichier CSV : Un fichier doit √™tre t√©l√©vers√©.
    if uploaded_file is not None:
        df_angebot_display = process_csv(uploaded_file)

    # --- Affichage Principal (organis√© en colonnes) ---
    col1, col2 = st.columns(2) # Cr√©e deux colonnes pour un affichage c√¥te √† c√¥te

    with col1: # Colonne de gauche pour les donn√©es de la demande
        st.header("Positions de la Demande (Anfrage)")
        if not df_anfrage_display.empty:
            st.dataframe(df_anfrage_display, use_container_width=True)
        elif anfrage_id_filter > 0: # Si un filtre a √©t√© appliqu√© mais aucun r√©sultat (ou √©chec de connexion)
            st.info("Aucune donn√©e trouv√©e pour cette AnfrageID ou erreur de connexion. V√©rifiez les param√®tres et l'ID.")
        else: # Si aucun filtre n'a √©t√© appliqu√© ou si les param√®tres DB sont invalides
            st.info("Veuillez entrer une AnfrageID valide et configurer la connexion DB pour afficher les donn√©es de la demande.")

    with col2: # Colonne de droite pour les donn√©es de l'offre
        st.header("Positions de l'Offre (Angebot)")
        if not df_angebot_display.empty:
            st.dataframe(df_angebot_display, use_container_width=True)
        elif uploaded_file is not None: # Si un fichier a √©t√© charg√© mais n'a pas pu √™tre trait√© ou √©tait vide
            st.info("Le fichier CSV n'a pas pu √™tre trait√©, est vide, ou ne contient pas les colonnes requises.")
        else: # Si aucun fichier n'a √©t√© charg√©
            st.info("Veuillez charger un fichier CSV pour afficher les donn√©es de l'offre.")

    # --- Section Comparaison ---
    # Le DataFrame df_comparison_display est d√©j√† initialis√© plus haut.
    
    # Logique du bouton "Comparer" dans la barre lat√©rale
    if st.sidebar.button("Comparer", key="compare_button", help="Cliquez pour lancer la comparaison apr√®s avoir charg√© les donn√©es."):
        # Condition pour effectuer la comparaison : les deux DataFrames (demande et offre) doivent contenir des donn√©es.
        if not df_anfrage_display.empty and not df_angebot_display.empty:
            st.success("Donn√©es de la demande et de l'offre charg√©es. Comparaison en cours...")
            # Appel de la fonction de comparaison. Utilisation de .copy() pour √©viter les modifications sur les originaux.
            df_comparison_display = compare_data(df_anfrage_display.copy(), df_angebot_display.copy()) 
            
            # Affichage du tableau comparatif s'il n'est pas vide
            if not df_comparison_display.empty:
                st.header("Tableau Comparatif") # R√©-afficher le header ici pour qu'il n'apparaisse qu'apr√®s clic
                st.dataframe(df_comparison_display, use_container_width=True)
                
                # Pr√©paration et affichage du bouton de t√©l√©chargement pour le tableau comparatif
                csv_export = df_comparison_display.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="T√©l√©charger le tableau comparatif (CSV)",
                    data=csv_export,
                    file_name="comparaison_offre_demande.csv",
                    mime="text/csv",
                    key="download_csv_button" # Ajout d'une cl√© au bouton de t√©l√©chargement
                )
            else:
                # Cas o√π la comparaison est effectu√©e mais ne retourne aucun r√©sultat (ex: aucun ArticleNumber en commun et aucun unique)
                st.header("Tableau Comparatif")
                st.info("La comparaison n'a produit aucun r√©sultat. V√©rifiez que les ArticleNumber correspondent entre la demande et l'offre.")
        
        # Messages d'avertissement si l'une des sources de donn√©es est manquante lors du clic sur "Comparer"
        elif df_anfrage_display.empty and df_angebot_display.empty:
             st.warning("Veuillez charger les donn√©es de la demande (via DB) et de l'offre (via CSV) avant de comparer.")
        elif df_anfrage_display.empty:
            st.warning("Les donn√©es de la demande (Anfrage) sont manquantes. Veuillez v√©rifier la connexion DB et l'AnfrageID.")
        elif df_angebot_display.empty:
            st.warning("Les donn√©es de l'offre (Angebot) n'ont pas √©t√© charg√©es ou trait√©es. Veuillez uploader un fichier CSV valide.")
        else:
            # Fallback g√©n√©rique, ne devrait pas √™tre atteint si les conditions ci-dessus sont logiques
            st.warning("Une erreur inconnue est survenue. Assurez-vous que les donn√©es de la demande et de l'offre sont correctement charg√©es.")
    else:
        # √âtat initial de la section du tableau comparatif (avant que l'utilisateur clique sur "Comparer")
        st.header("Tableau Comparatif") # Toujours afficher le header
        # df_comparison_display est vide √† ce stade (ou contient le r√©sultat d'une ex√©cution pr√©c√©dente si Streamlit recharge le script)
        # Mais on ne l'affiche pas encore, on affiche un message d'attente.
        if df_anfrage_display.empty and df_angebot_display.empty:
             st.info("Cliquez sur 'Comparer' dans la barre lat√©rale apr√®s avoir configur√© la DB, entr√© une AnfrageID et charg√© un fichier CSV.")
        elif df_anfrage_display.empty and not df_angebot_display.empty:
            st.info("En attente des donn√©es de la demande (Anfrage). Configurez la DB et entrez une AnfrageID.")
        elif not df_anfrage_display.empty and df_angebot_display.empty:
            st.info("En attente des donn√©es de l'offre (Angebot). Chargez un fichier CSV.")
        elif not df_anfrage_display.empty and not df_angebot_display.empty:
             st.info("Donn√©es de la demande et de l'offre charg√©es. Pr√™t √† comparer. Cliquez sur le bouton 'Comparer' dans la barre lat√©rale.")
        else: # Cas par d√©faut si aucun des √©tats ci-dessus n'est vrai (devrait √™tre rare)
            st.info("Configurez les sources de donn√©es et cliquez sur 'Comparer'.")


if __name__ == "__main__":
    main() # Ex√©cute la fonction principale si le script est lanc√© directement
